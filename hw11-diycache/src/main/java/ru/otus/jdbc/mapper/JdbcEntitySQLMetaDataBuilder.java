package ru.otus.jdbc.mapper;

import ru.otus.jdbc.sessionmanager.SessionManagerJdbc;

import java.lang.reflect.Field;
import java.util.List;
import java.util.StringJoiner;

class JdbcEntitySQLMetaDataBuilder {

    private final SessionManagerJdbc sessionManager;

    private final EntityClassMetaData<?> classMetaData;

    private SqlEnquoter enquoter;

    public JdbcEntitySQLMetaDataBuilder(SessionManagerJdbc sessionManager, EntityClassMetaData<?> classMetaData) {
        this.sessionManager = sessionManager;
        this.classMetaData = classMetaData;
    }

    public EntitySQLMetaData build() throws JdbcMapperException {
        sessionManager.beginSession();
        try {
            enquoter = sessionManager.getSqlEnquoter();
            return buildInternal();
        } finally {
            sessionManager.rollbackSession();
        }
    }

    private EntitySQLMetaData buildInternal() {
        return new JdbcEntitySQLMetaData(
                getSelectAllSql(),
                getSelectByIdSql(),
                getInsertSql(),
                getUpdateSql()
        );
    }

    private String getSelectAllSql() {
        return String.format("SELECT %s FROM %s",
                formatAllFieldsSql(),
                enquoter.enquoteIdentifier(classMetaData.getName()));
    }

    private String getSelectByIdSql() {
        return String.format("SELECT %s FROM %s WHERE %s=?",
                formatAllFieldsSql(),
                enquoter.enquoteIdentifier(classMetaData.getName()),
                enquoter.enquoteIdentifier(classMetaData.getIdField().getName())
        );
    }

    private String getInsertSql() {
        StringJoiner fieldNames = new StringJoiner(",");
        StringJoiner values = new StringJoiner(",");

        final List<Field> insertedFields;
        if (classMetaData.isIdFieldAutoGenerated()) {
            insertedFields = classMetaData.getFieldsWithoutId();
        } else {
            insertedFields = classMetaData.getAllFields();
        }

        for (Field field : insertedFields) {
            fieldNames.add(enquoter.enquoteIdentifier(field.getName()));
            values.add("?");
        }

        return String.format("INSERT INTO %s(%s) VALUES (%s)",
                enquoter.enquoteIdentifier(classMetaData.getName()),
                fieldNames.toString(),
                values.toString());
    }

    private String getUpdateSql() {
        StringJoiner joiner = new StringJoiner(",");
        for (Field field : classMetaData.getFieldsWithoutId()) {
            joiner.add(enquoter.enquoteIdentifier(field.getName()) + "=?");
        }

        return String.format("UPDATE %s SET %s WHERE %s=?",
                enquoter.enquoteIdentifier(classMetaData.getName()),
                joiner,
                enquoter.enquoteIdentifier(classMetaData.getIdField().getName()));
    }

    // (field1,field2,field3)...
    private String formatAllFieldsSql() {
        StringJoiner joiner = new StringJoiner(",");
        for (Field field : classMetaData.getAllFields()) {
            joiner.add(enquoter.enquoteIdentifier(field.getName()));
        }
        return joiner.toString();
    }

}
